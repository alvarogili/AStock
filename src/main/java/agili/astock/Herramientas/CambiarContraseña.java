/*
 * CambiarContraseña.java
 *
 * Created on 05-feb-2010, 18:12:49
 */
package agili.astock.Herramientas;

import BD.Utilidades.PasswordAdmin;
import Utilidades.DESEncript;
import agili.astock.BD.AccesosBD;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Alvaro Gili
 */
public class CambiarContraseña extends javax.swing.JDialog {

    public enum tipoContraseña {

        PASS_BD, PASS_ADMIN
    };
    private boolean passwordChanged = false;
    private tipoContraseña tipoPass;

    /** Creates new form CambiarContraseña */
    public CambiarContraseña(tipoContraseña tipo) {
        tipoPass = tipo;
        initComponents();
    }

    public boolean isPasswordChanged() {
        return passwordChanged;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPasswordPassAnterior = new javax.swing.JPasswordField();
        jPasswordNuevaPass = new javax.swing.JPasswordField();
        jPasswordRetryPass = new javax.swing.JPasswordField();
        jButtonCancelar = new javax.swing.JButton();
        jButtonGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cambiar contraseña");
        setLocationByPlatform(true);

        jLabel1.setText("Contraseña anterior:");

        jLabel2.setText("Nueva contraseña:");

        jLabel3.setText("Repetir nueva contraseña:");

        jButtonCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/application-exit.png"))); // NOI18N
        jButtonCancelar.setText("Cancelar");
        jButtonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelarActionPerformed(evt);
            }
        });

        jButtonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/media-floppy.png"))); // NOI18N
        jButtonGuardar.setText("Cambiar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPasswordRetryPass)
                    .addComponent(jPasswordNuevaPass)
                    .addComponent(jPasswordPassAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(96, Short.MAX_VALUE)
                .addComponent(jButtonGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCancelar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jPasswordPassAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordNuevaPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jPasswordRetryPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGuardar)
                    .addComponent(jButtonCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_jButtonCancelarActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed

        String passAnterior = new String(jPasswordPassAnterior.getPassword());
        String nuevaPass = new String(jPasswordNuevaPass.getPassword());
        String retryPass = new String(jPasswordRetryPass.getPassword());
        DESEncript encript = new DESEncript();

        if (tipoPass == tipoContraseña.PASS_BD) {//cambio contraseña BD
            DatosDeConfiguracion ddc = DatosDeConfiguracion.getInstance();

            File passBD = new File("BDP.des");
            //verifico si existe el archivo de contraseña y
            //compruebo que coincida con la ingresada
            if (passBD.exists()) {
                BufferedReader input;
                try {
                    input = new BufferedReader(new FileReader(passBD));
                    String password = input.readLine();
                    if (!passAnterior.equals(encript.decrypt(password))) {
                        JOptionPane.showMessageDialog(this, "La contraseña anterior no es la correcta, por favor verifique",
                                "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/img/error.gif")));
                        return;
                    }

                    input.close();

                } catch (IOException ex) {
                    Logger.getLogger(CambiarContraseña.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

            if (!nuevaPass.equals(retryPass)) {
                JOptionPane.showMessageDialog(this, "La nueva contraseña y su repetición no coinciden, por favor verifique",
                        "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/img/error.gif")));
                return;
            } else {//la contraseña anterior es la correcta y las dos nuevas coinciden

                String newPass = encript.encrypt(nuevaPass);
                FileOutputStream fileOutputStream;
                try {
                    fileOutputStream = new FileOutputStream(passBD);
                    fileOutputStream.write(newPass.getBytes());
                    fileOutputStream.close();
                    ddc.setContraseñaBD(nuevaPass);
                } catch (IOException ex) {
                    Logger.getLogger(CambiarContraseña.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (tipoPass == tipoContraseña.PASS_ADMIN) {//cambio contraseña Admin
            boolean primeraVez = true;
            AccesosBD abd = AccesosBD.getInstance();
            PasswordAdmin passwordAdmin = (PasswordAdmin) abd.getObjeto(PasswordAdmin.class, null);
            if (passwordAdmin != null) {//existia una contraseña
                primeraVez = false;
                if (!passwordAdmin.appGetPassAdmin().equals(encript.encrypt(passAnterior))) {
                    JOptionPane.showMessageDialog(this, "La contraseña anterior no es la correcta, por favor verifique",
                            "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/img/error.gif")));
                    return;
                }
            } else {
                passwordAdmin = new PasswordAdmin();
            }
            if (!nuevaPass.equals(retryPass)) {
                JOptionPane.showMessageDialog(this, "La nueva contraseña y su repetición no coinciden, por favor verifique",
                        "Error", JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/img/error.gif")));
                return;
            } else {//la contraseña anterior es la correcta y las dos nuevas coinciden

                String newPass = encript.encrypt(nuevaPass);
                passwordAdmin.appSetPassAdmin(newPass);
                if (primeraVez) {
                    passwordAdmin.appSetSolicitarPassInicio(true);
                    abd.guardarEnBD(passwordAdmin);
                } else {
                    abd.actualizarObjeto(PasswordAdmin.class, passwordAdmin, null);
                }
            }
        }
        passwordChanged = true;
        dispose();
    }//GEN-LAST:event_jButtonGuardarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancelar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordNuevaPass;
    private javax.swing.JPasswordField jPasswordPassAnterior;
    private javax.swing.JPasswordField jPasswordRetryPass;
    // End of variables declaration//GEN-END:variables
}
